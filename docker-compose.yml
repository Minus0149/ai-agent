services:
  # Main automation service
  automation-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: browser-automation-backend
    ports:
      - "8000:8000"  # FastAPI
      - "5901:5901"  # VNC
      - "6080:6080"  # noVNC (websockify)
      - "80:80"      # Nginx frontend
    environment:
      - DOCKER_CONTAINER=true
      - DISPLAY=:1
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./configs:/app/configs
      - ./reports:/app/reports
      - automation_data:/app/data
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - automation-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and task queuing
  redis:
    image: redis:7-alpine
    container_name: automation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - automation-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Note: VNC web access is handled by the main automation-backend container
  # which includes websockify on port 6080

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: automation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - automation-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: automation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - automation-network
    profiles:
      - monitoring

  # Database for persistence (optional)
  postgres:
    image: postgres:15-alpine
    container_name: automation-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=automation
      - POSTGRES_USER=automation
      - POSTGRES_PASSWORD=automation123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - automation-network
    profiles:
      - database

volumes:
  automation_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local

networks:
  automation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16